<?php

if (!class_exists('uDrawSchedules')) {
    
    class uDrawSchedules {

        public $uDrawSettings;
        public $uDrawConnect;
        public $uDraw;
        public $uDrawUtil;
        public $goSendEx;

        function __construct() {
            $this->uDrawSettings = new uDrawSettings();
            $this->uDrawConnect = new uDrawConnect();
            $this->uDraw = new uDraw();
            $this->uDrawUtil = new uDrawUtil();
            $this->goSendEx = new GoSendEx();
        }
        
        public function init() {
            add_filter('cron_schedules',array(&$this, 'cron_schedules'));

            // Schedule a daily event to clean up empty folders
            add_action('udraw_clean_empty_folders', array(&$this, 'clean_empty_folders'), 10, 1);
            if (! wp_next_scheduled ( 'udraw_clean_empty_folders' )) {
                wp_schedule_event(time() + 1, 'daily', 'udraw_clean_empty_folders');
            }

            // Schedule a bi-weekly event to clean up old production files.
            add_action( 'wp_ajax_udraw_cleanup_old_production_files', array(&$this,'cleanup_old_production_files' ) );
            add_action( 'udraw_cleanup_old_production_files', array(&$this, 'cleanup_old_production_files'), 10, 1);
            if (! wp_next_scheduled ( 'udraw_cleanup_old_production_files' )) {
                wp_schedule_event(time() + 1, 'daily', 'udraw_cleanup_old_production_files');
            }

            // Schedule event every 90 minutes to check for uDraw orders that were not properly generated.
            add_action('udraw_check_udraw_orders', array(&$this, 'check_udraw_orders'));
            if (! wp_next_scheduled('udraw_check_udraw_orders')) {
                wp_schedule_event(time()+1, '60min', 'udraw_check_udraw_orders');
            }
        }

        /**
         * Defined new cron schedules ( if not already defined )
         *
         * @param $schedules
         * @return mixed
         */
        function cron_schedules($schedules){
            if(!isset($schedules["60min"])){
                $schedules["60min"] = array(
                    'interval' => 60*60,
                    'display' => __('Once every 60 minutes'));
            }
            return $schedules;
        }

        /**
         * Cleans up all empty uDraw folders
         *
         * @return void
         */
        public function clean_empty_folders () {
            error_log('Cleaning empty folders');
            $folders = list_files(UDRAW_STORAGE_DIR, 1 );
            $to_remove = array();
            $expire_time = 60 * 60 * 24 * 2; //2 days
            for ($i = 0; $i < count($folders); $i++ ) {
                if (strrpos($folders[$i], '_templates_') === false && strrpos($folders[$i], '_designs_') === false) {
                    $folder = $folders[$i];
                    $_folders = list_files($folder);
                    $last_modded = filemtime($folder);
                    $now = time();
                    $expired = ($now - $last_modded >= $expire_time) ? true : false;
                    $has_files = false;
                    if ($expired) {
                        for ($j = 0; $j < count($_folders); $j++) {
                            $_file = $_folders[$j];
                            $pathinfo = pathinfo($_file);
                            if (isset($pathinfo['extension'])) {
                                $has_files = true;
                            }
                        }
                        if (!$has_files) {
                            error_log($folder . ' does not have any files');
                            array_push($to_remove, $folder);
                        }
                    }
                }
            }

            $count = 0;
            if (count($to_remove) > 0) {
                WP_Filesystem();
                global $wp_filesystem;
                while (count($to_remove) > 0) {
                    $folder = array_pop($to_remove);
                    error_log('Removing ' . $folder);
                    //Delete
                    $wp_filesystem->delete($folder, true);
                    $count++;
                }
            }
            error_log('Removed ' . $count . ' folders.');
        }

        /**
         * Removes old production files generated by uDraw ( Expiry date is defined in uDraw Settings )
         *
         * @return void
         */
        public function cleanup_old_production_files() {
            //Should delete file on 1st and 15th of every month.
            error_log(print_r('Deleting old production files from FTP function triggered', true));
            $todaysDate = date('d');
            error_log(print_r('Todays Date: ' . $todaysDate, true));
            //if ($todaysDate == '01' || $todaysDate == '1' || $todaysDate == '15') {
            error_log(print_r('Deleting old production files from FTP', true));
            $settings = $this->uDrawSettings->get_settings();
            WP_Filesystem();
            global $wp_filesystem;
            $udraw_dir_size = 0; $udraw_dir_size_after_cleanup = 0;

            $args = array(
                'role'    => 'Administrator',
                'orderby' => 'user_login',
                'order'   => 'ASC'
            );
            $users = get_users( $args ); $user_logins = array();
            foreach ( $users as $user ) {
                array_push($user_logins, $user->user_login);
            }

            if (isset($settings['udraw_production_file_cleanup'])) {
                if ($settings['udraw_production_file_cleanup']) {
                    $expiry_days = $settings['udraw_production_files_to_keep'];
                    if ($expiry_days == '90days') {
                        $expiry_time = 90;
                    } else if ($expiry_days == '60days') {
                        $expiry_time = 60;
                    } else if ($expiry_days == '30days') {
                        $expiry_time = 30;
                    } else if ($expiry_days == 'custom') {
                        if (isset($settings['udraw_custom_duration_days']) && strlen($settings['udraw_custom_duration_days'] > 0)) {
                            $expiry_time = $settings['udraw_custom_duration_days'];
                        } else {
                            $expiry_time = 90;
                        }
                    }
                    error_log(print_r('Expiry Time ' . $expiry_time, true));
                    $converted_expiry_time = 60 * 60 * 24 * $expiry_time; //in seconds

                    $storage_dir_folders = list_files(UDRAW_STORAGE_DIR, 1 );
                    $orders_dir_folders = list_files(UDRAW_ORDERS_DIR, 1 );
                    $uploads_dir_folders = list_files(UDRAW_TEMP_UPLOAD_DIR, 1 );

                    //Cleaning up Orders Folder.
                    $ordersCount = count($orders_dir_folders);
                    for ($x = 0; $x < $ordersCount; $x++ ) {
                        if(is_dir($orders_dir_folders[$x])) {
                            //Is a folder
                            $folder = $orders_dir_folders[$x];
                            $last_modded = filemtime($folder);
                            $now = time();
                            $expired = ($now - $last_modded >= $converted_expiry_time) ? true : false;

                            if( $expired ) { $wp_filesystem->delete($folder, true); }

                        } else {
                            //It is a file
                            $file_path = $orders_dir_folders[$x];
                            $last_modded = filemtime($file_path);
                            $now = time();
                            $expired = ($now - $last_modded >= $converted_expiry_time) ? true : false;

                            if( $expired ) { wp_delete_file( $file_path ); }
                        }
                    }

                    //Cleaning up Uploads Folder.
                    $uploadCount = count($uploads_dir_folders);
                    for ($y = 0; $y < $uploadCount; $y++ ) {
                        if(is_dir($uploads_dir_folders[$y])) {
                            //Is a folder
                            $folder = $uploads_dir_folders[$y];
                            $last_modded = filemtime($folder);
                            $now = time();
                            $expired = ($now - $last_modded >= $converted_expiry_time) ? true : false;

                            if( $expired ) { $wp_filesystem->delete($folder, true); }

                        } else {
                            //It is a file
                            $file_path = $uploads_dir_folders[$y];
                            $last_modded = filemtime($file_path);
                            $now = time();
                            $expired = ($now - $last_modded >= $converted_expiry_time) ? true : false;

                            if( $expired ) { wp_delete_file( $file_path ); }

                        }
                    }

                    //Cleaning up Storage Folder.
                    $storageCount = count($storage_dir_folders);
                    for ($z = 0; $z < $storageCount; $z++ ) {
                        $admin_user_folder = $this->strposa($storage_dir_folders[$z], $user_logins);
                        if (strrpos($storage_dir_folders[$z], '_templates_') === false && strrpos($storage_dir_folders[$z], '_designs_') === false && $admin_user_folder === false) {
                            //Not an admin user and folder hasn't been modified for the set period of time.
                            if(is_dir($storage_dir_folders[$z])) {
                                $folder = $storage_dir_folders[$z];
                                $last_modded = filemtime($folder);
                                $now = time();
                                $expired = ($now - $last_modded >= $converted_expiry_time) ? true : false;

                                if( $expired ) { error_log(print_r($folder, true)); $wp_filesystem->delete($folder, true); }

                            }
                        }
                    }

                }
                error_log(print_r('Cleanup complete', true));
            }
        }

        public function strposa($haystack, $needle, $offset=0) {
            if(!is_array($needle)) $needle = array($needle);
            foreach($needle as $query) {
                if(strpos($haystack, $query, $offset) !== false) return true;
            }
            return false;
        }

        /**
         * Checks for any recent uDraw orders that have been placed but the PDF documents were not generated
         * when order was initially created.
         *
         * @return void
         */
        public function check_udraw_orders() {
            $initial_date = date('Y-m-d',strtotime("-5 days"));
            $final_date = date('Y-m-d');
            $order_args = array(
                'limit'=>-1,
                'type'=> 'shop_order',
                'status'=> array( 'wc-processing' ),
                'date_created'=> $initial_date .'...'. $final_date
            );
            $orders = wc_get_orders($order_args);

            for ($x = 0; $x < count($orders); $x++) {
                $order = new WC_Order($orders[$x]->get_id());
                if ($order->get_date_created()->date('H:i') < date('H:i', strtotime("-90 minutes"))) {
                    $order_items = $order->get_items();
                    foreach ($order_items as $order_item_id => $item_details) {
                        $trigger_order_rebuild = false;
                        if (isset($item_details['item_meta'])) {
                            if (isset($item_details['item_meta']['_udraw_pdf_xref'])) {
                                $udraw_pdf_file = $item_details['item_meta']['_udraw_pdf_xref'];
                                if (!file_exists($udraw_pdf_file)) { $trigger_order_rebuild = true;}

                                if (file_exists($udraw_pdf_file)) {
                                    if (filesize($udraw_pdf_file) == 0) {
                                        $trigger_order_rebuild = true;
                                    }
                                }
                            } else if (isset($item_details['udraw_data']['udraw_product_data'])) {
                                $trigger_order_rebuild = true;
                            }
                        }

                        if ($trigger_order_rebuild) {
                            if (isset($item_details['udraw_data']['udraw_product_data'])) {
                                $data = array(
                                    'designFile' => UDRAW_STORAGE_URL . $item_details['udraw_data']['udraw_product_data'],
                                    'key' => uDraw::get_udraw_activation_key()
                                );
                                $udraw_convert_response = json_decode($this->uDrawUtil->get_web_contents(UDRAW_CONVERT_SERVER_URL . '/uDraw2PDF', http_build_query($data)));
                                if ($udraw_convert_response->isSuccess) {
                                    $udrawOrderItemName = "uDraw-Order-" . $orders[$x]->get_id() . "-" . $order_item_id;
                                    $this->uDrawUtil->download_file(UDRAW_CONVERT_SERVER_URL . $udraw_convert_response->data->pdf, UDRAW_ORDERS_DIR . $udrawOrderItemName . '.pdf');
                                    wc_add_order_item_meta($order_item_id, "_udraw_pdf_path", UDRAW_ORDERS_URL . $udrawOrderItemName . '.pdf');
                                    wc_add_order_item_meta($order_item_id, "_udraw_pdf_xref", UDRAW_ORDERS_URL . $udrawOrderItemName . '.pdf');
                                } else {
                                    $order->add_order_note("uDraw failed to rebuild document. [ " . $udraw_convert_response->message . " ]");
                                }
                            }
                        }
                    }
                }
            }
        }
    }
}